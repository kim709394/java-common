<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--无参构造方法注册spring bean
        scope:作用域:
        singleton：单例，容器初始化的时候就被实例化进单例池管理，容器销毁时才销毁，默认值
        prototype：多例，容器初始化的时候并没有实例化，不会放在ioc容器的单例池中，
        再调用容器getBean方法或者需要调用的时候才实例化给调用者，然后随着引用对象
        的消亡而被gc，ioc容器只负责实例化，不负责销毁
        init-method:bean装配后调用，必须是一个无参方法
        destory-method:bean销毁前调用，scope为singleton单例的时候才能起作用
        lazy-init="false":是否延迟加载，如果延迟加载的话，容器启动时不会实例化到
        单例池，只会在被引用的时候才会实例化，例如调用getBean方法或者被其他bean引用
        的时候才会进行实例化，如果这个bean在其他没有延迟加载的单例bean引用的话，
        则也会被立即加载。
    -->
    <bean id="student" class="com.kim.springframework.ioc.xml.bean.StudentBean" scope="prototype" lazy-init="false"
          init-method="initMethod" destroy-method="destoryMethod"></bean>
    <bean id="lifeCycleBean" class="com.kim.springframework.ioc.xml.bean.LifeCycleBean" scope="singleton"></bean>

    <!--依赖注入-->
    <bean id="school" class="com.kim.springframework.ioc.xml.bean.SchoolBean">
        <!--构造方法注入-->
        <constructor-arg index="0" value="3" />
        <constructor-arg index="1" value="深圳市外国语学校"/>
        <constructor-arg index="2" value="20"/>
        <constructor-arg index="3" ref="teacher"/>
        <!--普通类型属性注入-->
        <property name="id" value="4"/>
        <property name="name" value="深圳市外国语学校"/>
        <property name="age" value="20"/>
        <property name="teacherBean" ref="teacher"/>
        <!--数组或集合类型属性注入-->
        <property name="studentBeans" >
            <array>
                <ref bean="student"/>
            </array>
        </property>
        <property name="workersBeans" >
            <array>
                <ref bean="worker"/>
            </array>
        </property>
        <!--map类型属性注入-->
        <property name="history">
            <map>
                <entry key="1991年" value="学校成立"/>
                <entry key="1995年" value="荣获全市示范性学校"/>
                <entry key="2000年" value="晋升市一级学校"/>
            </map>
        </property>
        <!--set集合属性注入-->
        <property name="grades">
            <set>
                <value>一年级</value>
                <value>二年级</value>
                <value>三年级</value>
                <value>四年级</value>
                <value>五年级</value>
                <value>六年级</value>
            </set>
        </property>
        <!--properties类型属性注入-->
        <property name="leaderInfos">
            <props>
                <prop key="一(1)班" >吴老师</prop>
                <prop key="二(1)班" >王老师</prop>
                <prop key="三(1)班" >黄老师</prop>
                <prop key="四(1)班" >李老师</prop>
                <prop key="五(1)班" >林老师</prop>
                <prop key="六(1)班" >欧阳主任</prop>
            </props>
        </property>
    </bean>

    <!--使用静态方法工厂bean创建,factory-method指定创建bean的工厂方法-->
    <bean id="teacher" class="com.kim.springframework.ioc.xml.factory.StaticBeanFactory" factory-method="buildTeacher"></bean>

    <!--使用工厂bean的非静态方法创建-->
    <bean id="workerFactory" class="com.kim.springframework.ioc.xml.factory.BeanFactory"></bean>

    <bean id="worker" factory-bean="workerFactory" factory-method="buildWorkers"></bean>

    <!--aop-->
    <!--配置增强类-->
    <bean id="xmlAdvice" class="com.kim.springframework.aop.XmlAdvice"></bean>
    <!--业务逻辑处理类bean，切入点类也要被spring管理-->
    <bean id="businessHandler" class="com.kim.springframework.aop.BusinessHandler"/>
    <aop:config proxy-target-class="true">  <!--proxy-target-class="true"是配置spring强制使用cglib代理-->
        <!--配置增强类为切面-->
        <aop:aspect id="aopAdvice" ref="xmlAdvice">

            <!-- aspectj表达式配置切点
                execution(访问修饰符 返回值 全路径包名.类名.方法名(参数类型))
                访问修饰符可以省略，*表示任意返回值:execution(* 全路径包名.类名.方法名(参数类型))
                包名可以用..表示任意包和子包，也可以用*表示每一级包名，但是有多少级就有多少个*.:
                execution(* *.*.*.*.类名.方法名(参数类型))
                *..表示当前包及其子包:execution(* *..类名.方法名(参数类型))
                类目和方法名可以用*表示任意：  execution(* *..*.*(参数类型))
                参数类型用..表示任意参数，可有可无:  execution(* *..*.*(..))
                参数类型用*表示任意参数，但是一定要有参数execution(* *..*.*(*))
                全通配：execution(* * *..*.*(..)),省略访问修饰符则是:execution(* *..*.*(..))
            -->
            <aop:pointcut id="handlePointcut" expression="execution(public void com.kim.springframework.aop.BusinessHandler.handle(java.lang.String))"/>

            <!--配置前置增强 method是增强类的方法名，pointcut是执行切入哪个类的哪个方法-->
            <aop:before method="before" pointcut-ref="handlePointcut"  ></aop:before>
            <!--后置增强 切点方法正常执行才会执行该增强方法-->
            <aop:after-returning method="afterReturning" pointcut-ref="handlePointcut" returning="result"/>
            <!--异常增强-->
            <aop:after-throwing method="throwing" pointcut-ref="handlePointcut" throwing="ex"/>
            <!--后置增强 切点方法无论是否抛出异常都会执行-->
            <aop:after method="afterAlways" pointcut-ref="handlePointcut"/>
            <!--环绕增强-->
            <aop:around method="around" pointcut-ref="handlePointcut"/>
        </aop:aspect>

        <aop:aspect id="aopAdvice2" ref="xmlAdvice">
            <aop:pointcut id="throwExceptionHandlePointcut" expression="execution(public void com.kim.springframework.aop.BusinessHandler.throwExceptionHandle(java.lang.String))"/>
            <!--配置前置增强 method是增强类的方法名，pointcut是执行切入哪个类的哪个方法-->
            <aop:before method="before" pointcut-ref="throwExceptionHandlePointcut" ></aop:before>
            <!--后置增强 切点方法正常执行才会执行该增强方法-->
            <aop:after-returning method="afterReturning" pointcut-ref="throwExceptionHandlePointcut" returning="result"/>
            <!--异常增强-->
            <aop:after-throwing method="throwing" pointcut-ref="throwExceptionHandlePointcut" throwing="ex"/>
            <!--后置增强 切点方法无论是否抛出异常都会执行-->
            <aop:after method="afterAlways" pointcut-ref="throwExceptionHandlePointcut"/>
            <!--环绕增强-->
            <aop:around method="around" pointcut-ref="throwExceptionHandlePointcut"/>

        </aop:aspect>


    </aop:config>
    <!--此标签是基于XML和注解组合配置AOP时的必备标签，表示Spring开启注解配置AOP的⽀持
        <aop:aspectj-autoproxy proxy-target-class="true" />
    -->


</beans>
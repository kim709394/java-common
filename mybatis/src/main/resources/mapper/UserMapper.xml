<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kim.mybatis.mapper.UserMapper">

    <!--开启userMapper的二级缓存-->
    <cache></cache>

    <sql id="selectColumns">
        select id,name,password,created_at,deleted_at from t_user
    </sql>
    <!--useCache：是否启用二级缓存，true：启用，默认值；false：禁用
        flushCache:是否刷新二级缓存，当执行了insert、update、delete等操作，需要刷新二级缓存
        如果设置为false，则不刷新，会出现脏读，默认为true
    -->
    <select id="findAll" resultType="User" useCache="true" flushCache="true">
        <include refid="selectColumns"></include>
    </select>

    <insert id="addUser" parameterType="User">
        insert into t_user (name,password,created_at) values
        (#{name} , #{password}, #{createdAt})
    </insert>

    <update id="updateUser" parameterType="User">
        update t_user set name = #{name},password=#{password} where id = #{id}
    </update>

    <delete id="deleteUser" parameterType="Integer">
        delete from t_user where id=#{id}
    </delete>

    <select id="findById" parameterType="Integer" resultType="user">
        <include refid="selectColumns"></include>
        where id=#{id}
    </select>

    <select id="getPageRecordsByPageInput" parameterType="UserPageInput" resultType="User">
        <include refid="selectColumns"></include>
        <!--自动拼接where 和and/or语句-->
        <trim prefix="where" prefixOverrides="and|or">
            and deleted_at is null
            <if test="name != null and name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="password != null and password != ''">
                and password = #{password}
            </if>
            <if test="createdAtStart != null">
                and created_at &gt; #{createdAtStart}
            </if>
            <if test="createdAtEnd != null">
                and created_at &lt; #{createdAtEnd}
            </if>
            order by created_at desc
            limit #{limit},#{pageSize}

        </trim>

    </select>

    <select id="getTotalByPageInput" parameterType="UserPageInput" resultType="Integer">
        select count(1) from t_user
        <trim prefix="where" prefixOverrides="and|or">
            and deleted_at is null
            <if test="name != null and name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="password != null and password != ''">
                and password = #{password}
            </if>
            <if test="createdAtStart != null">
                and created_at &gt; #{createdAtStart}
            </if>
            <if test="createdAtEnd != null">
                and created_at &lt; #{createdAtEnd}
            </if>
        </trim>
    </select>

    <select id="getUsersByIds" parameterType="List" resultType="User">
        <include refid="selectColumns"></include>
         where id in
        <foreach item="id" collection="list" separator="," open="(" close=")" index="">
            #{id}
        </foreach>
    </select>

    
    <resultMap id="userRoleMap" type="User">
        <result column="uid" property="id"/>
        <result column="uname" property="name"/>
        <result column="password" property="password"/>
        <result column="ucreated" property="createdAt"/>
        <result column="udeleted" property="deletedAt"/>
       <collection property="roles" ofType="Role">
           <result column="rid" property="id"/>
           <result column="rname" property="name"/>
           <result column="code" property="code"/>
           <result column="rcreated" property="createdAt"/>
           <result column="rdeleted" property="deletedAt"/>
       </collection>
    </resultMap>
    
    <!--一对多封装-->
    <select id="queryRolesByUid" parameterType="Integer" resultMap="userRoleMap">
        select u.id as uid,u.name as uname,u.password,u.created_at as ucreated,
        u.deleted_at as udeleted,r.id as rid,r.name as rname,r.code,r.created_at as rcreated,
        r.deleted_at as rdeleted from
        (select * from t_user where id = #{id}) u
        left join t_user_role ur on u.id=ur.user_id
        left join t_role r on ur.role_id = r.id
    </select>
    
    
</mapper>